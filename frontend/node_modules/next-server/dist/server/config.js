"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const find_up_1 = __importDefault(require("find-up"));
const constants_1 = require("next-server/constants");
const targets = ['server', 'serverless'];
const defaultConfig = {
    webpack: null,
    webpackDevMiddleware: null,
    poweredByHeader: true,
    distDir: '.next',
    assetPrefix: '',
    configOrigin: 'default',
    useFileSystemPublicRoutes: true,
    generateBuildId: () => null,
    generateEtags: true,
    pageExtensions: ['jsx', 'js'],
    target: 'server',
    onDemandEntries: {
        maxInactiveAge: 60 * 1000,
        pagesBufferLength: 2,
        websocketPort: 0,
        websocketProxyPath: '/',
        websocketProxyPort: null
    }
};
function normalizeConfig(phase, config) {
    if (typeof config === 'function') {
        return config(phase, { defaultConfig });
    }
    return config;
}
function loadConfig(phase, dir, customConfig) {
    if (customConfig) {
        return Object.assign({}, defaultConfig, { configOrigin: 'server' }, customConfig);
    }
    const path = find_up_1.default.sync(constants_1.CONFIG_FILE, {
        cwd: dir
    });
    // If config file was found
    if (path && path.length) {
        const userConfigModule = require(path);
        const userConfig = normalizeConfig(phase, userConfigModule.default || userConfigModule);
        if (userConfig.target && !targets.includes(userConfig.target)) {
            throw new Error(`Specified target is invalid. Provided: "${userConfig.target}" should be one of ${targets.join(', ')}`);
        }
        if (userConfig.onDemandEntries) {
            userConfig.onDemandEntries = Object.assign({}, defaultConfig.onDemandEntries, userConfig.onDemandEntries);
        }
        return Object.assign({}, defaultConfig, { configOrigin: constants_1.CONFIG_FILE }, userConfig);
    }
    return defaultConfig;
}
exports.default = loadConfig;
