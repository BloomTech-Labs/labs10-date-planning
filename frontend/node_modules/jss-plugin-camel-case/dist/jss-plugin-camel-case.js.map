{"version":3,"file":"jss-plugin-camel-case.js","sources":["../../../node_modules/hyphenate-style-name/index.js","../src/index.js"],"sourcesContent":["'use strict';\n\nvar uppercasePattern = /[A-Z]/g;\nvar msPattern = /^ms-/;\nvar cache = {};\n\nfunction hyphenateStyleName(string) {\n    return string in cache\n    ? cache[string]\n    : cache[string] = string\n      .replace(uppercasePattern, '-$&')\n      .toLowerCase()\n      .replace(msPattern, '-ms-');\n}\n\nmodule.exports = hyphenateStyleName;\n","// @flow\nimport type {Plugin} from 'jss'\nimport hyphenate from 'hyphenate-style-name'\n\n/**\n * Convert camel cased property names to dash separated.\n *\n * @param {Object} style\n * @return {Object}\n */\nfunction convertCase(style) {\n  const converted = {}\n\n  for (const prop in style) {\n    converted[hyphenate(prop)] = style[prop]\n  }\n\n  if (style.fallbacks) {\n    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase)\n    else converted.fallbacks = convertCase(style.fallbacks)\n  }\n\n  return converted\n}\n\n/**\n * Allow camel cased property names by converting them back to dasherized.\n *\n * @param {Rule} rule\n */\nexport default function camelCase(): Plugin {\n  function onProcessStyle(style) {\n    if (Array.isArray(style)) {\n      // Handle rules like @font-face, which can have multiple styles in an array\n      for (let index = 0; index < style.length; index++) {\n        style[index] = convertCase(style[index])\n      }\n      return style\n    }\n\n    return convertCase(style)\n  }\n\n  function onChangeValue(value, prop, rule) {\n    const hyphenatedProp = hyphenate(prop)\n\n    // There was no camel case in place\n    if (prop === hyphenatedProp) return value\n\n    rule.prop(hyphenatedProp, value)\n\n    // Core will ignore that property value we set the proper one above.\n    return null\n  }\n\n  return {onProcessStyle, onChangeValue}\n}\n"],"names":["uppercasePattern","msPattern","cache","hyphenateStyleName","string","replace","toLowerCase","module","convertCase","style","converted","prop","hyphenate","fallbacks","Array","isArray","map","camelCase","onProcessStyle","index","length","onChangeValue","value","rule","hyphenatedProp"],"mappings":";;;;;;IAEA,IAAIA,gBAAgB,GAAG,QAAvB;IACA,IAAIC,SAAS,GAAG,MAAhB;IACA,IAAIC,KAAK,GAAG,EAAZ;;IAEA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoC;aACzBA,MAAM,IAAIF,KAAV,GACLA,KAAK,CAACE,MAAD,CADA,GAELF,KAAK,CAACE,MAAD,CAAL,GAAgBA,MAAM,CACrBC,OADe,CACPL,gBADO,EACW,KADX,EAEfM,WAFe,GAGfD,OAHe,CAGPJ,SAHO,EAGI,MAHJ,CAFlB;;;IAQJM,wBAAA,GAAiBJ,kBAAjB;;ICXA;;;;;;;IAMA,SAASK,WAAT,CAAqBC,KAArB,EAA4B;IAC1B,MAAMC,SAAS,GAAG,EAAlB;;IAEA,OAAK,IAAMC,IAAX,IAAmBF,KAAnB,EAA0B;IACxBC,IAAAA,SAAS,CAACE,oBAAS,CAACD,IAAD,CAAV,CAAT,GAA6BF,KAAK,CAACE,IAAD,CAAlC;IACD;;IAED,MAAIF,KAAK,CAACI,SAAV,EAAqB;IACnB,QAAIC,KAAK,CAACC,OAAN,CAAcN,KAAK,CAACI,SAApB,CAAJ,EAAoCH,SAAS,CAACG,SAAV,GAAsBJ,KAAK,CAACI,SAAN,CAAgBG,GAAhB,CAAoBR,WAApB,CAAtB,CAApC,KACKE,SAAS,CAACG,SAAV,GAAsBL,WAAW,CAACC,KAAK,CAACI,SAAP,CAAjC;IACN;;IAED,SAAOH,SAAP;IACD;IAED;;;;;;;AAKA,IAAe,SAASO,SAAT,GAA6B;IAC1C,WAASC,cAAT,CAAwBT,KAAxB,EAA+B;IAC7B,QAAIK,KAAK,CAACC,OAAN,CAAcN,KAAd,CAAJ,EAA0B;IACxB;IACA,WAAK,IAAIU,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGV,KAAK,CAACW,MAAlC,EAA0CD,KAAK,EAA/C,EAAmD;IACjDV,QAAAA,KAAK,CAACU,KAAD,CAAL,GAAeX,WAAW,CAACC,KAAK,CAACU,KAAD,CAAN,CAA1B;IACD;;IACD,aAAOV,KAAP;IACD;;IAED,WAAOD,WAAW,CAACC,KAAD,CAAlB;IACD;;IAED,WAASY,aAAT,CAAuBC,KAAvB,EAA8BX,IAA9B,EAAoCY,IAApC,EAA0C;IACxC,QAAMC,cAAc,GAAGZ,oBAAS,CAACD,IAAD,CAAhC,CADwC;;IAIxC,QAAIA,IAAI,KAAKa,cAAb,EAA6B,OAAOF,KAAP;IAE7BC,IAAAA,IAAI,CAACZ,IAAL,CAAUa,cAAV,EAA0BF,KAA1B,EANwC;;IASxC,WAAO,IAAP;IACD;;IAED,SAAO;IAACJ,IAAAA,cAAc,EAAdA,cAAD;IAAiBG,IAAAA,aAAa,EAAbA;IAAjB,GAAP;IACD;;;;;;;;;;;;"}