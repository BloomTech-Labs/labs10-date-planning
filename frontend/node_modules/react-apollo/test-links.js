(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('apollo-link'), require('graphql/language/printer'), require('apollo-utilities')) :
    typeof define === 'function' && define.amd ? define(['exports', 'apollo-link', 'graphql/language/printer', 'apollo-utilities'], factory) :
    (global = global || self, factory(global['react-apollo'] = {}, global.apolloLink, global.printer, global.apolloUtilities));
}(this, function (exports, apolloLink, printer, apolloUtilities) { 'use strict';

    var __extends = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var isEqual = require('lodash.isequal');
    var MockLink = (function (_super) {
        __extends(MockLink, _super);
        function MockLink(mockedResponses, addTypename) {
            if (addTypename === void 0) { addTypename = true; }
            var _this = _super.call(this) || this;
            _this.addTypename = true;
            _this.mockedResponsesByKey = {};
            _this.addTypename = addTypename;
            if (mockedResponses)
                mockedResponses.forEach(function (mockedResponse) {
                    _this.addMockedResponse(mockedResponse);
                });
            return _this;
        }
        MockLink.prototype.addMockedResponse = function (mockedResponse) {
            var key = requestToKey(mockedResponse.request, this.addTypename);
            var mockedResponses = this.mockedResponsesByKey[key];
            if (!mockedResponses) {
                mockedResponses = [];
                this.mockedResponsesByKey[key] = mockedResponses;
            }
            mockedResponses.push(mockedResponse);
        };
        MockLink.prototype.request = function (operation) {
            var key = requestToKey(operation, this.addTypename);
            var responseIndex;
            var response = (this.mockedResponsesByKey[key] || []).find(function (res, index) {
                var requestVariables = operation.variables || {};
                var mockedResponseVariables = res.request.variables || {};
                if (!isEqual(requestVariables, mockedResponseVariables)) {
                    return false;
                }
                responseIndex = index;
                return true;
            });
            if (!response || typeof responseIndex === 'undefined') {
                throw new Error("No more mocked responses for the query: " + printer.print(operation.query) + ", variables: " + JSON.stringify(operation.variables));
            }
            this.mockedResponsesByKey[key].splice(responseIndex, 1);
            var result = response.result, error = response.error, delay = response.delay, newData = response.newData;
            if (newData) {
                response.result = newData();
                this.mockedResponsesByKey[key].push(response);
            }
            if (!result && !error) {
                throw new Error("Mocked response should contain either result or error: " + key);
            }
            return new apolloLink.Observable(function (observer) {
                var timer = setTimeout(function () {
                    if (error) {
                        observer.error(error);
                    }
                    else {
                        if (result)
                            observer.next(result);
                        observer.complete();
                    }
                }, delay ? delay : 0);
                return function () {
                    clearTimeout(timer);
                };
            });
        };
        return MockLink;
    }(apolloLink.ApolloLink));
    var MockSubscriptionLink = (function (_super) {
        __extends(MockSubscriptionLink, _super);
        function MockSubscriptionLink() {
            var _this = _super.call(this) || this;
            _this.unsubscribers = [];
            _this.setups = [];
            return _this;
        }
        MockSubscriptionLink.prototype.request = function (_req) {
            var _this = this;
            return new apolloLink.Observable(function (observer) {
                _this.setups.forEach(function (x) { return x(); });
                _this.observer = observer;
                return function () {
                    _this.unsubscribers.forEach(function (x) { return x(); });
                };
            });
        };
        MockSubscriptionLink.prototype.simulateResult = function (result, complete) {
            var _this = this;
            if (complete === void 0) { complete = false; }
            setTimeout(function () {
                var observer = _this.observer;
                if (!observer)
                    throw new Error('subscription torn down');
                if (complete && observer.complete)
                    observer.complete();
                if (result.result && observer.next)
                    observer.next(result.result);
                if (result.error && observer.error)
                    observer.error(result.error);
            }, result.delay || 0);
        };
        MockSubscriptionLink.prototype.onSetup = function (listener) {
            this.setups = this.setups.concat([listener]);
        };
        MockSubscriptionLink.prototype.onUnsubscribe = function (listener) {
            this.unsubscribers = this.unsubscribers.concat([listener]);
        };
        return MockSubscriptionLink;
    }(apolloLink.ApolloLink));
    function requestToKey(request, addTypename) {
        var queryString = request.query && printer.print(addTypename ? apolloUtilities.addTypenameToDocument(request.query) : request.query);
        var requestKey = { query: queryString };
        return JSON.stringify(requestKey);
    }
    function mockSingleLink() {
        var mockedResponses = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            mockedResponses[_i] = arguments[_i];
        }
        var maybeTypename = mockedResponses[mockedResponses.length - 1];
        var mocks = mockedResponses.slice(0, mockedResponses.length - 1);
        if (typeof maybeTypename !== 'boolean') {
            mocks = mockedResponses;
            maybeTypename = true;
        }
        return new MockLink(mocks, maybeTypename);
    }
    function mockObservableLink() {
        return new MockSubscriptionLink();
    }

    exports.MockLink = MockLink;
    exports.MockSubscriptionLink = MockSubscriptionLink;
    exports.mockSingleLink = mockSingleLink;
    exports.mockObservableLink = mockObservableLink;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
