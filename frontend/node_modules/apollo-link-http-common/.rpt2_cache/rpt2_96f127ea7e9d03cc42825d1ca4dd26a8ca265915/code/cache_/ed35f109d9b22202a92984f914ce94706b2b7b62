{"code":"import * as tslib_1 from \"tslib\";\r\nimport { print } from 'graphql/language/printer';\r\nvar defaultHttpOptions = {\r\n    includeQuery: true,\r\n    includeExtensions: false,\r\n};\r\nvar defaultHeaders = {\r\n    accept: '*/*',\r\n    'content-type': 'application/json',\r\n};\r\nvar defaultOptions = {\r\n    method: 'POST',\r\n};\r\nexport var fallbackHttpConfig = {\r\n    http: defaultHttpOptions,\r\n    headers: defaultHeaders,\r\n    options: defaultOptions,\r\n};\r\nexport var throwServerError = function (response, result, message) {\r\n    var error = new Error(message);\r\n    error.name = 'ServerError';\r\n    error.response = response;\r\n    error.statusCode = response.status;\r\n    error.result = result;\r\n    throw error;\r\n};\r\nexport var parseAndCheckHttpResponse = function (operations) { return function (response) {\r\n    return (response\r\n        .text()\r\n        .then(function (bodyText) {\r\n        try {\r\n            return JSON.parse(bodyText);\r\n        }\r\n        catch (err) {\r\n            var parseError = err;\r\n            parseError.name = 'ServerParseError';\r\n            parseError.response = response;\r\n            parseError.statusCode = response.status;\r\n            parseError.bodyText = bodyText;\r\n            return Promise.reject(parseError);\r\n        }\r\n    })\r\n        .then(function (result) {\r\n        if (response.status >= 300) {\r\n            throwServerError(response, result, \"Response not successful: Received status code \" + response.status);\r\n        }\r\n        if (!Array.isArray(result) &&\r\n            !result.hasOwnProperty('data') &&\r\n            !result.hasOwnProperty('errors')) {\r\n            throwServerError(response, result, \"Server response was missing for query '\" + (Array.isArray(operations)\r\n                ? operations.map(function (op) { return op.operationName; })\r\n                : operations.operationName) + \"'.\");\r\n        }\r\n        return result;\r\n    }));\r\n}; };\r\nexport var checkFetcher = function (fetcher) {\r\n    if (!fetcher && typeof fetch === 'undefined') {\r\n        var library = 'unfetch';\r\n        if (typeof window === 'undefined')\r\n            library = 'node-fetch';\r\n        throw new Error(\"\\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\\nyour environment like https://www.npmjs.com/package/\" + library + \".\\n\\nFor example:\\nimport fetch from '\" + library + \"';\\nimport { createHttpLink } from 'apollo-link-http';\\n\\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });\");\r\n    }\r\n};\r\nexport var createSignalIfSupported = function () {\r\n    if (typeof AbortController === 'undefined')\r\n        return { controller: false, signal: false };\r\n    var controller = new AbortController();\r\n    var signal = controller.signal;\r\n    return { controller: controller, signal: signal };\r\n};\r\nexport var selectHttpOptionsAndBody = function (operation, fallbackConfig) {\r\n    var configs = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        configs[_i - 2] = arguments[_i];\r\n    }\r\n    var options = tslib_1.__assign({}, fallbackConfig.options, { headers: fallbackConfig.headers, credentials: fallbackConfig.credentials });\r\n    var http = fallbackConfig.http;\r\n    configs.forEach(function (config) {\r\n        options = tslib_1.__assign({}, options, config.options, { headers: tslib_1.__assign({}, options.headers, config.headers) });\r\n        if (config.credentials)\r\n            options.credentials = config.credentials;\r\n        http = tslib_1.__assign({}, http, config.http);\r\n    });\r\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\r\n    var body = { operationName: operationName, variables: variables };\r\n    if (http.includeExtensions)\r\n        body.extensions = extensions;\r\n    if (http.includeQuery)\r\n        body.query = print(query);\r\n    return {\r\n        options: options,\r\n        body: body,\r\n    };\r\n};\r\nexport var serializeFetchParameter = function (p, label) {\r\n    var serialized;\r\n    try {\r\n        serialized = JSON.stringify(p);\r\n    }\r\n    catch (e) {\r\n        var parseError = new Error(\"Network request failed. \" + label + \" is not serializable: \" + e.message);\r\n        parseError.parseError = e;\r\n        throw parseError;\r\n    }\r\n    return serialized;\r\n};\r\nexport var selectURI = function (operation, fallbackURI) {\r\n    var context = operation.getContext();\r\n    var contextURI = context.uri;\r\n    if (contextURI) {\r\n        return contextURI;\r\n    }\r\n    else if (typeof fallbackURI === 'function') {\r\n        return fallbackURI(operation);\r\n    }\r\n    else {\r\n        return fallbackURI || '/graphql';\r\n    }\r\n};\r\n//# sourceMappingURL=index.js.map","map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dtsmap":{"name":"/Users/hwillson/Documents/git/apollo/apollo-link/packages/apollo-link-http-common/index.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"index.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"src/index.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAaxC,oBAAY,WAAW,GAAG,KAAK,GAAG;IAChC,QAAQ,EAAE,QAAQ,CAAC;IACnB,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IAC5B,UAAU,EAAE,MAAM,CAAC;CACpB,CAAC;AAGF,oBAAY,gBAAgB,GAAG,KAAK,GAAG;IACrC,QAAQ,EAAE,QAAQ,CAAC;IACnB,UAAU,EAAE,MAAM,CAAC;IACnB,QAAQ,EAAE,MAAM,CAAC;CAClB,CAAC;AAEF,oBAAY,gBAAgB,GAAG,KAAK,GAAG;IACrC,UAAU,EAAE,KAAK,CAAC;CACnB,CAAC;AAEF,MAAM,WAAW,gBAAgB;IAC/B,YAAY,CAAC,EAAE,OAAO,CAAC;IACvB,iBAAiB,CAAC,EAAE,OAAO,CAAC;CAC7B;AAED,MAAM,WAAW,UAAU;IACzB,IAAI,CAAC,EAAE,gBAAgB,CAAC;IACxB,OAAO,CAAC,EAAE,GAAG,CAAC;IACd,OAAO,CAAC,EAAE,GAAG,CAAC;IACd,WAAW,CAAC,EAAE,GAAG,CAAC;CACnB;AAED,MAAM,WAAW,WAAW;IAC1B,CAAC,SAAS,EAAE,SAAS,GAAG,MAAM,CAAC;CAChC;AAGD,MAAM,WAAW,IAAI;IACnB,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,aAAa,CAAC,EAAE,MAAM,CAAC;IACvB,SAAS,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IAChC,UAAU,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;CAClC;AAED,MAAM,WAAW,WAAW;IAM1B,GAAG,CAAC,EAAE,MAAM,GAAG,WAAW,CAAC;IAO3B,iBAAiB,CAAC,EAAE,OAAO,CAAC;IAK5B,KAAK,CAAC,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;IAK7B,OAAO,CAAC,EAAE,GAAG,CAAC;IAKd,WAAW,CAAC,EAAE,MAAM,CAAC;IAKrB,YAAY,CAAC,EAAE,GAAG,CAAC;CACpB;AAiBD,eAAO,MAAM,kBAAkB;;;;;;;;;CAI9B,CAAC;AAEF,eAAO,MAAM,gBAAgB,qDAS5B,CAAC;AAGF,eAAO,MAAM,yBAAyB,2DA+CrC,CAAC;AAEF,eAAO,MAAM,YAAY,wFAcxB,CAAC;AAEF,eAAO,MAAM,uBAAuB;;;CAOnC,CAAC;AAEF,eAAO,MAAM,wBAAwB;;;CA8CpC,CAAC;AAEF,eAAO,MAAM,uBAAuB,6BAYnC,CAAC;AAGF,eAAO,MAAM,SAAS,oFAcrB,CAAC\"}"},"dts":{"name":"/Users/hwillson/Documents/git/apollo/apollo-link/packages/apollo-link-http-common/index.d.ts","writeByteOrderMark":false,"text":"import { Operation } from 'apollo-link';\r\nexport declare type ServerError = Error & {\r\n    response: Response;\r\n    result: Record<string, any>;\r\n    statusCode: number;\r\n};\r\nexport declare type ServerParseError = Error & {\r\n    response: Response;\r\n    statusCode: number;\r\n    bodyText: string;\r\n};\r\nexport declare type ClientParseError = Error & {\r\n    parseError: Error;\r\n};\r\nexport interface HttpQueryOptions {\r\n    includeQuery?: boolean;\r\n    includeExtensions?: boolean;\r\n}\r\nexport interface HttpConfig {\r\n    http?: HttpQueryOptions;\r\n    options?: any;\r\n    headers?: any;\r\n    credentials?: any;\r\n}\r\nexport interface UriFunction {\r\n    (operation: Operation): string;\r\n}\r\nexport interface Body {\r\n    query?: string;\r\n    operationName?: string;\r\n    variables?: Record<string, any>;\r\n    extensions?: Record<string, any>;\r\n}\r\nexport interface HttpOptions {\r\n    uri?: string | UriFunction;\r\n    includeExtensions?: boolean;\r\n    fetch?: GlobalFetch['fetch'];\r\n    headers?: any;\r\n    credentials?: string;\r\n    fetchOptions?: any;\r\n}\r\nexport declare const fallbackHttpConfig: {\r\n    http: HttpQueryOptions;\r\n    headers: {\r\n        accept: string;\r\n        'content-type': string;\r\n    };\r\n    options: {\r\n        method: string;\r\n    };\r\n};\r\nexport declare const throwServerError: (response: any, result: any, message: any) => never;\r\nexport declare const parseAndCheckHttpResponse: (operations: any) => (response: Response) => Promise<any>;\r\nexport declare const checkFetcher: (fetcher: (input?: string | Request, init?: RequestInit) => Promise<Response>) => void;\r\nexport declare const createSignalIfSupported: () => {\r\n    controller: any;\r\n    signal: any;\r\n};\r\nexport declare const selectHttpOptionsAndBody: (operation: Operation, fallbackConfig: HttpConfig, ...configs: HttpConfig[]) => {\r\n    options: HttpConfig & Record<string, any>;\r\n    body: Body;\r\n};\r\nexport declare const serializeFetchParameter: (p: any, label: any) => any;\r\nexport declare const selectURI: (operation: any, fallbackURI?: string | ((operation: Operation) => string)) => any;\r\n//# sourceMappingURL=index.d.ts.map"}}
